// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

       // Put your code here:


// if dest says to not load in a but 1st bit is a 0, then load instruction (c) into a reg.
// maybe do some dmux where 



Mux16(a=instruction,b=ALUout,sel=instruction[5],out=mux1out1); // feed ALU output into A register if d1 =1

Mux16(a=instruction,b=mux1out1,sel=instruction[15],out=mux1out2);

    ARegister(in=mux1out2,load=instruction[5],out=Aout,out[0..14]=addressM,out[12]=Aout12); //will only enter new value when d1 says to input ALU output into A register, else it will keep pushing through the instructions

Mux16(a=false,b=ALUout,sel=instruction[4],out=Din);

    DRegister(in=Din,load=instruction[4],out=Dout);//load ALU output into D reg when d bit says to

    Not(in=Aout12,out=NotAout); //out is 1 if aout[12] is a 0

And(a=NotAout,b=inM[12],out=Mux2selector); // out is 1 if BOTH aout[12] is a 0 and inM[12] is a 1--- thus creating a perfect selector bit


    Mux16(a=Aout,b=inM,sel=Mux2selector,out=mux2out); // loads M instruction parts into ALU if 4th bit (a) of Aout =1 AND inM[3] =0, else loads Aout into ALU
    

Or(a=zr1,b=ng1,out=resultALUtest); //out should be 1 if it passes ALU test to jump

    Or(a=instruction[2],b=instruction[1],out=PCOr1);
    Or(a=PCOr1,b=instruction[0],out=resultjtest);//out should be 1 if it passes the j's test to jump
    
And(a=resultALUtest,b=resultjtest,out=loadtojump); // load bit will be 0 or one, based on if the PC needs to jump (thus accepting the Areg input)



//Mux(a=true,b=false,sel=loadtojump,out=incpc);
    PC(in=Aout,load=loadtojump,inc=true,reset=reset,out=PCout);
    
    ALU(x=Dout,y=mux2out,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=ALUout,zr=zr1,ng=ng1,out[12]=writeM); 


//Mux16(a=false,b=inM,sel=instruction[3],out=writeM); //will write something if d3 is a 1 
 
}