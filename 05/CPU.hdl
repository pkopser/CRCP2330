// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

       // Put your code here:



Mux16(a=instruction,b=ALUout,sel=instruction[15],out=mux1out); // feed instruction into A reg if 

Not(in=instruction[15],out=oppositemsb);

And(a=instruction[15],b=instruction[5],out=dmemory);
And(a=true,b=oppositemsb,out=ainstruction);

Or(a=ainstruction,b=dmemory,out=aloader);

    ARegister(in=mux1out,load=aloader,out=Aout,out[0..14]=addressM,out[12]=Aout12); //will only enter new value when d1 says to input ALU output into A register, or when it's an a instruction



// ==================================================================


And(a=instruction[15],b=instruction[4],out=dload);


    DRegister(in=ALUout,load=dload,out=Dout);//load ALU output into D reg when d bit says to


// ==================================================================


And(a=instruction[15],b=instruction[12],out=loadinMin);

Mux16(a=Aout,b=inM,sel=loadinMin,out=mux2out);


// ==================================================================



    ALU(x=Dout,y=mux2out,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=ALUout,zr=zr1,ng=ng1);

And(a=instruction[3],b=instruction[15],out=writeM);

// ================================================================== 

And(a=instruction[15],b=shouldjump,out=pcjump); // if its a C instruction and has a conditional or unconditional jump

Or(a=unconditional,b=conditional,out=shouldjump); //jump when it is conditional and true or unconditional

 And(a=instruction[2],b=instruction[1],out=Pcand1);
    And(a=Pcand1,b=instruction[0],out=unconditional); //if j1-j3 are all 1 then jump is unconditional



And(a=instruction[2],b=ng1,out=jlt);
And(a=instruction[1],b=zr1,out=jeq);
And(a=instruction[0],b=greaterthan,out=jgt); 

Or(a=jlt,b=jeq,out=firsttwo);
Or(a=firsttwo,b=jgt,out=conditional); //if one of these three is true then jump is conditional and passes

Not(in=pcjump,out=pcinc); //when it jumps, it will not increment by one


    PC(in=Aout,load=pcjump,inc=pcinc,reset=reset,out=PCout,out[0..14]=pc); 
   

Or(a=zr1,b=ng1,out=equalorlessthan);
Not(in=equalorlessthan,out=greaterthan); //testing ALU's output to compare with JGT 

 
}