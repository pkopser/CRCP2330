// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

       // Put your code here:

Mux16(a=instruction,b=ALUout,sel=instruction[10],out=mux1out); // feed ALU output into A register if d1 =1


    ARegister(in=mux1out,load=instruction[10],out=Aout,out[1..14]=addressM); //if opcode it 0 then the register will work b/c the load bit will be 0

Mux16(a=false,b=ALUout,sel=instruction[11],out=Din);

    DRegister(in=ALUout,load=instruction[11],out=Dout);//load is center dest bit

    Mux16(a=Aout,b=inM,sel=Aout[3],out=mux2out); loads M instruction parts into ALU if 4th bit (a) of Aout =1
    

Or(in=zr1,in=ng1,out=resultALUtest); //out should be 1 if it passes ALU test to jump

    Or(in=instruction[13],in=instruction[14],out=PCOr1)
    Or(in=PCOr1,in=instruction[15],out=resultjtest)//out should be 1 if it passes the j's test to jump
    
And(in=resultALUtest,in=resultjtest,out=loadtojump); // load bit will be 0 or one, based on if the PC needs to jump (thus accepting the Areg input)


    PC(in=Aout,load=loadtojump,inc=1,reset=reset,out=PCout);
    
    ALU(x=Dout,y=mux2out,zx=[4],nx=[5],zy=[6],ny=[7],f=[8],no=[9],out=outM,zr=zr1,ng=ng1,outM[12]=shouldwriteM); 


Mux16(a=false,b=inM,sel=instruction[12],out=writeM); //will write something if d3 is a 1 
 
}