// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

       // Put your code here:

    Mux16(a=instruction,b=ALUout,sel=instruction[0],out=mux1out); //if opcode = 0, pick instruction else pick ALU output



    ARegister(in=mux1out,load=instruction[10],out=Aout,out[1..14]=addressM); //if opcode it 0 then the register will work b/c the load bit will be 0

    DRegister(in=ALUout,load=instruction[11],out=Dout);//load is center dest bit

    Mux16(a=inM,b=Aout,sel=Aout[3],out=mux2out); loads M instruction parts into ALU if 4th bit of Aout is 1.
    

    Or(in=Mux1out[13],in=Mux1out[14],out=PCOr1)
    Or(in=PCOr1,in=Mux1out[15],out=PCOr2)
    Not(in=PCOr2,out=PCload) /// these 3 lines dictate whether or not jump is true, and makeing PC's load bit

    PC(in=Aout,load=PCload,inc=_________,reset=reset,out=PCout ); // control bits needed for load and inc---> come from j?
    
    ALU(x=Dout,y=mux2out,zx=[4],nx=[5],zy=[6],ny=[7],f=[8],no=[9],out=outM,zr=,ng=,outM[12]=writeM); // ________??

    // outM[12] out=writeM? // not sure how to strucure this. think somehting might come from ALU output control bits?
 
}